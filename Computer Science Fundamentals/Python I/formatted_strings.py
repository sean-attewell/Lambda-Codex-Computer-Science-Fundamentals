# To format a string in Python, you use the % operator to format a set of stored variables in a tuple.
# You also include argument specifiers in your string with special symbols like %s and %d.

name = "Austen"
year = 2020
print("Hey %s! It's the year %d." % (name, year))
# Hey Austen! It's the year 2020.

# Any object that is not a string can also be formatted using the s% operator. The string which returns from the object's repr method will be used in the formatted string.

my_list = [1, 2, 3]
print("my_list: %s" % my_list)
# my_list: [1, 2, 3]

# %s - String (or any object with a string representation)
# %d - Integers
# %f - Floating point numbers
# %.<number of digits>f - Floating point numbers with a fixed amount of digits to the dot's right.
# %x/%X - Integers in hexadecimal (lowercase/uppercase)

my_hex = 0x3523fe2e
print("my_int as hex: %X" % my_hex)

# changing the above to %d or %f will convert the hex.

product_name = "bananas"
price = 1.23
product_id = 123456
print("%s (id: %d) are currently $%.2f." % (product_name, product_id, price))
# bananas (id: 123456) are currently $1.23.

# can also convert to hex
print("%s (id: %x) are currently $%.2f." % (product_name, product_id, price))


# https://realpython.com/python-string-formatting/

errno = 50159747054
name = 'Bob'

# This makes your format strings easier to maintain and easier to modify in the future. You don’t have to worry about making sure the order you’re passing in the values matches up with the order in which the values are referenced in the format string. Of course, the downside is that this technique requires a little more typing.

# Pass in a mapping:
mapped_string = 'Hey %(name)s, there is a 0x %(errno)x error!' % {
    "name": name, "errno": errno}

print(mapped_string)


# “New Style” String Formatting (str.format)
# Python 3 introduced a new way to do string formatting that was also later back-ported to Python 2.7. This “new style” string formatting gets rid of
# the %-operator special syntax and makes the syntax for string formatting more regular. Formatting is now handled by calling .format() on a string object.

print('Hello, {}'.format(name))

# Or, you can refer to your variable substitutions by name and use them in any order you want.
# This is quite a powerful feature as it allows for re-arranging the order of display without changing the arguments passed to format():
print('Hey {name}, there is a 0x{errno:x} error!'.format(
    name=name, errno=errno))

# This also shows that the syntax to format an int variable as a hexadecimal string has changed. Now you need to pass a format spec by adding a :x suffix.
# Formatting string mini language: https://docs.python.org/3/library/string.html#string-formatting

# In Python 3, this “new style” string formatting is to be preferred over %-style formatting.
# While “old style” formatting has been de-emphasized, it has not been deprecated. It is still supported in the latest versions of Python.

# Formatted string literals / String Interpolation / f-Strings (Python 3.6+)
# This new way of formatting strings lets you use embedded Python expressions inside string constants.

print(f'Hello, {name}!')

# This new formatting syntax is powerful. Because you can embed arbitrary Python expressions, you can even do inline arithmetic with it.

a = 5
b = 10
print(f'Five plus ten is {a + b} and not {2 * (a + b)}.')

# String literals also support the existing format string syntax of the str.format() method.
# Python’s new formatted string literals are similar to JavaScript’s Template Literals added in ES2015

print(f"Hey {name}, there's a {errno:#x} error!")


# Finally there are template strings

# It’s a simpler and less powerful mechanism
# Template strings are not a core language feature but they’re supplied by the string module in the standard library

# the best time to use template strings is when you’re handling formatted strings generated by users of your program.
# Due to their reduced complexity, template strings are a safer choice

# It’s possible for format strings to access arbitrary variables in your program.

# That means, if a malicious user can supply a format string, they can potentially leak secret keys and other sensitive information!

# Read more here: https://realpython.com/python-string-formatting/
